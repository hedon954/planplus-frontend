/**
 * @file swan-chart组件js
 * @author yuanzhen
 */
/* globals Component,swan */
import SwanChart from './chart/index';
import createSVGContext from './svg-chart/index';
Component({
    properties: {
        chartOptions: {
            type: Object,
            value: {},
            observer(newVal, oldVal) {
                // 使用 setData 设置 this.data.some.subfield 时触发
                // （除此以外，使用 setData 设置 this.data.some 也会触发）
                this.draw();
            }
        }
    },
    data: {
        // 当前tooltip的样式
        toolTipStyle: {},
        // 当前tooltip的array
        tooltipTextArray: [],
        // 是否展示tooltip
        isShowTip: false,
        svgRefresh: true,
        ctxToolTip: null
    },

    attached() {
        this.draw();
    },
    methods: {
        draw() {
            let {
                renderType,
                canvasId = 'myCanvas'
            } = this.data.chartOptions;
            this.setData({
                renderType
            });
            setTimeout(() => {
                let ctx = swan.createCanvasContext(canvasId); // 数据上下文
                let ctxAxis = swan.createCanvasContext(`${canvasId}Axis`); // 坐标轴
                let svgCtx = createSVGContext(this);
                let ctxToolTip = swan.createCanvasContext(`${canvasId}ToolTip`); // 坐标轴
                this.ctxToolTip = ctxToolTip;
                if (renderType === 'svg') {
                    ctx = svgCtx;
                    ctxAxis = svgCtx;
                    ctxToolTip = svgCtx;
                    this.setData({
                        renderType: 'svg'
                    });
                }
                this.swanChartDemo = new SwanChart({
                    ctx,
                    ctxAxis,
                    ctxToolTip,
                    ...this.data.chartOptions
                });
            }, 100);
        },
        handleTouchStart(e) {
            if (this.data.renderType !== 'svg') {
                let {
                    canvasWidth,
                    canvasHeight
                } = this.data.chartOptions;
                let tooltip = this.swanChartDemo.showToolTip(e, {}, this);
                if (!tooltip) {
                    this.ctxToolTip.clearRect(0, 0, canvasWidth, canvasHeight);
                    this.ctxToolTip.draw();
                    return;
                }
            }
            else {
                const tooltipObj = this.swanChartDemo.showToolTip(e, {}, this);
                if (tooltipObj) {
                    const {tooltip, isOverRightBorder, categoryData} = tooltipObj;
                    const {offset, textList} = tooltip;
                    const translateX = isOverRightBorder ? '-100%' : '0';
                    this.setData({
                        isShowTip: true,
                        tooltipTextArray: textList,
                        toolTipStyle: `left: ${offset.x}px; top: ${offset.y}px;transform: translateX(${translateX});`,
                        categoryData
                    });
                }
            }
        }
    }
});
